From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KurumiFake <kurumiisshidowife@gmail.com>
Date: Thu, 18 Aug 2022 16:59:49 +0700
Subject: [PATCH] remove timings

original patch from https://github.com/PurpurMC/Purpur
original license: MIT

diff --git a/src/main/java/com/destroystokyo/paper/io/chunk/ChunkLoadTask.java b/src/main/java/com/destroystokyo/paper/io/chunk/ChunkLoadTask.java
index 9a2b51d005efc9d31b3685e8298fd00b341c7dc7..a24ea2289df15e462356ed7ae12d89a533712f7f 100644
--- a/src/main/java/com/destroystokyo/paper/io/chunk/ChunkLoadTask.java
+++ b/src/main/java/com/destroystokyo/paper/io/chunk/ChunkLoadTask.java
@@ -86,7 +86,7 @@ public final class ChunkLoadTask extends ChunkTask {
 
         final PlayerChunkMap chunkManager = this.world.getChunkProvider().playerChunkMap;
 
-        try (Timing ignored = this.world.timings.chunkLoadLevelTimer.startTimingIfSync()) {
+        //try (Timing ignored = this.world.timings.chunkLoadLevelTimer.startTimingIfSync()) {
             final ChunkRegionLoader.InProgressChunkHolder chunkHolder;
 
             // apply fixes
@@ -121,7 +121,7 @@ public final class ChunkLoadTask extends ChunkTask {
             }
 
             this.complete(chunkHolder);
-        }
+        //}
     }
 
     private void complete(final ChunkRegionLoader.InProgressChunkHolder holder) {
diff --git a/src/main/java/com/destroystokyo/paper/io/chunk/ChunkSaveTask.java b/src/main/java/com/destroystokyo/paper/io/chunk/ChunkSaveTask.java
index e3ad8f50b51c4e9bf38ffa5911444cc88d3f67eb..0f15e93f070bfc1e5114a83613aa72478783baa1 100644
--- a/src/main/java/com/destroystokyo/paper/io/chunk/ChunkSaveTask.java
+++ b/src/main/java/com/destroystokyo/paper/io/chunk/ChunkSaveTask.java
@@ -34,7 +34,7 @@ public final class ChunkSaveTask extends ChunkTask {
         // can be executed asynchronously or synchronously
         final NBTTagCompound compound;
 
-        try (Timing ignored = this.world.timings.chunkUnloadDataSave.startTimingIfSync()) {
+        try /*(Timing ignored = this.world.timings.chunkUnloadDataSave.startTimingIfSync())*/ {
             compound = ChunkRegionLoader.saveChunk(this.world, this.chunk, this.asyncSaveData);
         } catch (final Throwable ex) {
             // has a plugin modified something it should not have and made us CME?
@@ -43,7 +43,7 @@ public final class ChunkSaveTask extends ChunkTask {
             // Note: We add to the server thread queue here since this is what the server will drain tasks from
             // when waiting for chunks
             ChunkTaskManager.queueChunkWaitTask(() -> {
-                try (Timing ignored = this.world.timings.chunkUnloadDataSave.startTiming()) {
+                //try (Timing ignored = this.world.timings.chunkUnloadDataSave.startTiming()) {
                     NBTTagCompound data = PaperFileIOThread.FAILURE_VALUE;
 
                     try {
@@ -54,7 +54,7 @@ public final class ChunkSaveTask extends ChunkTask {
                     }
 
                     ChunkSaveTask.this.complete(data);
-                }
+                //}
             });
 
             return; // the main thread will now complete the data
diff --git a/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java b/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
index b870cca05f0ba354e6976a70511235636093d13c..66f1c38fd86b867943dfc6221d95a82d5d224512 100644
--- a/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
+++ b/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
@@ -47,9 +47,11 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
     //private final Function<MinecraftKey, T> getObjectFronMinecraftKey;
     private final Consumer<NextTickListEntry<T>> tickFunction;
 
+    /*
     private final co.aikar.timings.Timing timingCleanup; // Paper
     private final co.aikar.timings.Timing timingTicking; // Paper
     private final co.aikar.timings.Timing timingFinished;
+    */
 
     // note: remove ops / add ops suck on fastutil, a chained hashtable implementation would work better, but Long...
     // try to alleviate with a very small load factor
@@ -93,9 +95,11 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
         this.excludeFromScheduling = excludeFromScheduling;
         this.getMinecraftKeyFrom = getMinecraftKeyFrom;
         this.tickFunction = tickFunction;
+        /*
         this.timingCleanup = co.aikar.timings.WorldTimingsHandler.getTickList(world, timingsType + " - Cleanup"); // Paper
         this.timingTicking = co.aikar.timings.WorldTimingsHandler.getTickList(world, timingsType + " - Ticking"); // Paper
         this.timingFinished = co.aikar.timings.WorldTimingsHandler.getTickList(world, timingsType + " - Finish");
+        */
         this.currentTick = this.world.getTime();
     }
 
@@ -286,7 +290,7 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
         final ChunkProviderServer chunkProvider = this.world.getChunkProvider();
 
         this.world.getMethodProfiler().enter("cleaning");
-        this.timingCleanup.startTiming();
+        //this.timingCleanup.startTiming();
 
         this.prepare();
 
@@ -294,9 +298,9 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
         this.shortScheduled[this.shortScheduledIndex].clear();
         this.shortScheduledIndex = getNextIndex(this.shortScheduledIndex, SHORT_SCHEDULE_TICK_THRESHOLD);
 
-        this.timingCleanup.stopTiming();
+        //this.timingCleanup.stopTiming();
         this.world.getMethodProfiler().exitEnter("ticking");
-        this.timingTicking.startTiming();
+        //this.timingTicking.startTiming();
 
         for (final NextTickListEntry<T> toTick : this.toTickThisTick) {
             if (toTick.tickState != STATE_PENDING_TICK) {
@@ -327,9 +331,9 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
             }
         }
 
-        this.timingTicking.stopTiming();
+        //this.timingTicking.stopTiming();
         this.world.getMethodProfiler().exit();
-        this.timingFinished.startTiming();
+        //this.timingFinished.startTiming();
 
         // finished ticking, actual cleanup time
         for (int i = 0, len = this.toTickThisTick.size(); i < len; ++i) {
@@ -341,7 +345,7 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
             }
         }
 
-        this.timingFinished.stopTiming();
+        //this.timingFinished.stopTiming();
     }
 
     private void onTickEnd(final NextTickListEntry<T> entry) {
diff --git a/src/main/java/net/minecraft/commands/CustomFunction.java b/src/main/java/net/minecraft/commands/CustomFunction.java
index 4c146ac041332230f6d9a01be28b6852c7624416..ea2fe109bde8074aebf304a9b071f5eb69a8729c 100644
--- a/src/main/java/net/minecraft/commands/CustomFunction.java
+++ b/src/main/java/net/minecraft/commands/CustomFunction.java
@@ -15,6 +15,7 @@ public class CustomFunction {
 
     private final CustomFunction.c[] a;
     private final MinecraftKey b;
+    /*
     // Paper start
     public co.aikar.timings.Timing timing;
     public co.aikar.timings.Timing getTiming() {
@@ -24,6 +25,7 @@ public class CustomFunction {
         return timing;
     }
     // Paper end
+    */
 
     public CustomFunction(MinecraftKey minecraftkey, CustomFunction.c[] acustomfunction_c) {
         this.b = minecraftkey;
diff --git a/src/main/java/net/minecraft/network/protocol/PlayerConnectionUtils.java b/src/main/java/net/minecraft/network/protocol/PlayerConnectionUtils.java
index 71a000edfab27c9965d1929af78582821d5af97a..adec1a6bb48707a40584f8833caafc29db7f21d4 100644
--- a/src/main/java/net/minecraft/network/protocol/PlayerConnectionUtils.java
+++ b/src/main/java/net/minecraft/network/protocol/PlayerConnectionUtils.java
@@ -45,13 +45,13 @@ public class PlayerConnectionUtils {
 
     public static <T extends PacketListener> void ensureMainThread(Packet<T> packet, T t0, IAsyncTaskHandler<?> iasynctaskhandler) throws CancelledPacketHandleException {
         if (!iasynctaskhandler.isMainThread()) {
-            Timing timing = MinecraftTimings.getPacketTiming(packet); // Paper - timings
+            //Timing timing = MinecraftTimings.getPacketTiming(packet); // Paper - timings
             iasynctaskhandler.execute(() -> {
                 packetProcessing.push(t0); // Tuinity - detailed watchdog information
                 try { // Tuinity - detailed watchdog information
                 if (MinecraftServer.getServer().hasStopped() || (t0 instanceof PlayerConnection && ((PlayerConnection) t0).processedDisconnect)) return; // CraftBukkit, MC-142590
                 if (t0.a().isConnected()) {
-                    try (Timing ignored = timing.startTiming()) { // Paper - timings
+                    try /*(Timing ignored = timing.startTiming())*/ { // Paper - timings
                     packet.a(t0);
                     } // Paper - timings
                     // Paper start
diff --git a/src/main/java/net/minecraft/server/CustomFunctionData.java b/src/main/java/net/minecraft/server/CustomFunctionData.java
index 07ca1234ad6ffa797003f7317fb88abf732bc159..ffddb57660b9d30da83d1c1b089c45ab1cb80122 100644
--- a/src/main/java/net/minecraft/server/CustomFunctionData.java
+++ b/src/main/java/net/minecraft/server/CustomFunctionData.java
@@ -75,7 +75,7 @@ public class CustomFunctionData {
         } else {
             int j;
 
-            try (co.aikar.timings.Timing timing = customfunction.getTiming().startTiming()) { // Paper
+            try /*(co.aikar.timings.Timing timing = customfunction.getTiming().startTiming())*/ { // Paper
                 this.d = true;
                 int k = 0;
                 CustomFunction.c[] acustomfunction_c = customfunction.b();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d89c79e9790733bf3e2a376fcf8f552f9cb1687e..c234264ddd5b71f230ac9e2b531f8eae156849f7 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -901,7 +901,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         // Paper end
         // CraftBukkit end
         MinecraftServer.LOGGER.info("Stopping");
-        MinecraftTimings.stopServer(); // Paper
+        //MinecraftTimings.stopServer(); // Paper
         // CraftBukkit start
         if (this.server != null) {
             this.server.disablePlugins();
@@ -1254,7 +1254,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             return;
         }
 
-        co.aikar.timings.MinecraftTimings.midTickChunkTasks.startTiming();
+        //co.aikar.timings.MinecraftTimings.midTickChunkTasks.startTiming();
         try {
             for (;;) {
                 boolean moreTasks = this.tickMidTickTasks();
@@ -1281,7 +1281,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                 }
             }
         } finally {
-            co.aikar.timings.MinecraftTimings.midTickChunkTasks.stopTiming();
+            //co.aikar.timings.MinecraftTimings.midTickChunkTasks.stopTiming();
         }
     }
     // Tuinity end - execute chunk tasks mid tick
@@ -1387,17 +1387,17 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     protected void exit() {}
 
     protected void a(BooleanSupplier booleansupplier) {
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper
+        //co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper
         this.slackActivityAccountant.tickStarted(); // Spigot
         long i = SystemUtils.getMonotonicNanos();
 
         // Paper start - move oversleep into full server tick
-        isOversleep = true;MinecraftTimings.serverOversleep.startTiming();
+        isOversleep = true;//MinecraftTimings.serverOversleep.startTiming();
         this.awaitTasks(() -> {
             // Tuinity - replace logic
             return !this.canOversleep();
         });
-        isOversleep = false;MinecraftTimings.serverOversleep.stopTiming();
+        isOversleep = false;//MinecraftTimings.serverOversleep.stopTiming();
         // Paper end
         new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.ticks+1).callEvent(); // Paper
 
@@ -1454,9 +1454,9 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.methodProfiler.exit();
 
         // Paper start - move executeAll() into full server tick timing
-        try (co.aikar.timings.Timing ignored = MinecraftTimings.processTasksTimer.startTiming()) {
+        //try (co.aikar.timings.Timing ignored = MinecraftTimings.processTasksTimer.startTiming()) {
             this.executeAll();
-        }
+        //}
         // Paper end
 
         com.tuinity.tuinity.util.CachedLists.reset(); // Tuinity
@@ -1483,32 +1483,32 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.methodProfiler.exit();
         org.spigotmc.WatchdogThread.tick(); // Spigot
         this.slackActivityAccountant.tickEnded(l); // Spigot
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
+        //co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
     }
 
     protected void b(BooleanSupplier booleansupplier) {
         // Tuinity - replace logic
-        MinecraftTimings.bukkitSchedulerTimer.startTiming(); // Spigot // Paper
+        //MinecraftTimings.bukkitSchedulerTimer.startTiming(); // Spigot // Paper
         this.server.getScheduler().mainThreadHeartbeat(this.ticks); // CraftBukkit
-        MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Spigot // Paper
+        //MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Spigot // Paper
         // Tuinity - replace logic
         this.methodProfiler.enter("commandFunctions");
-        MinecraftTimings.commandFunctionsTimer.startTiming(); // Spigot // Paper
+        //MinecraftTimings.commandFunctionsTimer.startTiming(); // Spigot // Paper
         this.getFunctionData().tick();
-        MinecraftTimings.commandFunctionsTimer.stopTiming(); // Spigot // Paper
+        //MinecraftTimings.commandFunctionsTimer.stopTiming(); // Spigot // Paper
         // Tuinity - replace logic
         this.methodProfiler.exitEnter("levels");
         Iterator iterator = this.getWorlds().iterator();
 
         // CraftBukkit start
         // Run tasks that are waiting on processing
-        MinecraftTimings.processQueueTimer.startTiming(); // Spigot
+        //MinecraftTimings.processQueueTimer.startTiming(); // Spigot
         while (!processQueue.isEmpty()) {
             processQueue.remove().run();
         }
-        MinecraftTimings.processQueueTimer.stopTiming(); // Spigot
+        //MinecraftTimings.processQueueTimer.stopTiming(); // Spigot
         // Tuinity - replace logic
-        MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper
+        //MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper
         // Send time updates to everyone, it will get the right time from the world the player is in.
         // Paper start - optimize time updates
         for (final WorldServer world : this.getWorlds()) {
@@ -1528,7 +1528,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             }
         }
         // Paper end
-        MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper
+        //MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper
 
         while (iterator.hasNext()) {
             WorldServer worldserver = (WorldServer) iterator.next();
@@ -1551,14 +1551,14 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
             try {
                 // Tuinity - replace logic
-                worldserver.timings.doTick.startTiming(); // Spigot
+                //worldserver.timings.doTick.startTiming(); // Spigot
                 worldserver.doTick(booleansupplier);
                 // Tuinity start
                 for (final com.tuinity.tuinity.chunk.SingleThreadChunkRegionManager regionManager : worldserver.getChunkProvider().playerChunkMap.regionManagers) {
                     regionManager.recalculateRegions();
                 }
                 // Tuinity end
-                worldserver.timings.doTick.stopTiming(); // Spigot
+                //worldserver.timings.doTick.stopTiming(); // Spigot
                 // Tuinity - replace logic
             } catch (Throwable throwable) {
                 // Spigot Start
@@ -1581,24 +1581,24 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         }
 
         this.methodProfiler.exitEnter("connection");
-        MinecraftTimings.connectionTimer.startTiming(); // Spigot
+        //MinecraftTimings.connectionTimer.startTiming(); // Spigot
         this.getServerConnection().c();
-        MinecraftTimings.connectionTimer.stopTiming(); // Spigot
+        //MinecraftTimings.connectionTimer.stopTiming(); // Spigot
         this.methodProfiler.exitEnter("players");
-        MinecraftTimings.playerListTimer.startTiming(); // Spigot // Paper
+        //MinecraftTimings.playerListTimer.startTiming(); // Spigot // Paper
         this.playerList.tick();
-        MinecraftTimings.playerListTimer.stopTiming(); // Spigot // Paper
+        //MinecraftTimings.playerListTimer.stopTiming(); // Spigot // Paper
         if (SharedConstants.d) {
             GameTestHarnessTicker.a.b();
         }
 
         this.methodProfiler.exitEnter("server gui refresh");
 
-        MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
+        //MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
         for (int i = 0; i < this.tickables.size(); ++i) {
             ((Runnable) this.tickables.get(i)).run();
         }
-        MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper
+        //MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper
 
         this.methodProfiler.exit();
     }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index d6b93130510e87ce2190e23da31e514e1c17dcd3..97b58184f746681ebd4ee04085290c09bd7c062e 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -451,7 +451,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     public void handleCommandQueue() {
-        MinecraftTimings.serverCommandTimer.startTiming(); // Spigot
+        //MinecraftTimings.serverCommandTimer.startTiming(); // Spigot
         // Paper start - use proper queue
         ServerCommand servercommand;
         while ((servercommand = this.serverCommandQueue.poll()) != null) {
@@ -468,7 +468,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             // CraftBukkit end
         }
 
-        MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot
+        //MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     @Override
@@ -701,6 +701,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             if (event.isCancelled()) {
                 return;
             }
+            /*
             // Paper start
             if (s.toLowerCase().startsWith("timings") && s.toLowerCase().matches("timings (report|paste|get|merged|seperate)")) {
                 org.bukkit.command.BufferedCommandSender sender = new org.bukkit.command.BufferedCommandSender();
@@ -713,10 +714,11 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 waitableArray[0] = waitable;
                 co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
             } else {
+            */
             // Paper end
             ServerCommand serverCommand = new ServerCommand(event.getCommand(), remoteControlCommandListener.getWrapper());
             server.dispatchServerCommand(remoteConsole, serverCommand);
-            } // Paper
+            //} // Paper
             // CraftBukkit end
         });
         // Paper start
diff --git a/src/main/java/net/minecraft/server/level/ChunkProviderServer.java b/src/main/java/net/minecraft/server/level/ChunkProviderServer.java
index aff92e0c8fefe30d8680f941546597049a2ddc9f..ebe7e1e0947dd0ab80ffa76a3c4fca308a3a1759 100644
--- a/src/main/java/net/minecraft/server/level/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/level/ChunkProviderServer.java
@@ -697,10 +697,10 @@ public class ChunkProviderServer extends IChunkProvider {
                 com.destroystokyo.paper.io.chunk.ChunkTaskManager.pushChunkWait(this.world, x, z);
                 // Paper end
                 com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.world, x, z); // Paper - sync load info
-                this.world.timings.syncChunkLoad.startTiming(); // Paper
+                //this.world.timings.syncChunkLoad.startTiming(); // Paper
             this.serverThreadQueue.awaitTasks(completablefuture::isDone);
                 com.destroystokyo.paper.io.chunk.ChunkTaskManager.popChunkWait(); // Paper - async chunk debug
-                this.world.timings.syncChunkLoad.stopTiming(); // Paper
+                //this.world.timings.syncChunkLoad.stopTiming(); // Paper
                 this.chunkMapDistance.clearPriorityTickets(pair); // Paper
                 this.chunkMapDistance.clearUrgent(pair); // Paper
             } // Paper
@@ -893,17 +893,17 @@ public class ChunkProviderServer extends IChunkProvider {
 
     public void save(boolean flag) {
         this.tickDistanceManager();
-        try (co.aikar.timings.Timing timed = world.timings.chunkSaveData.startTiming()) { // Paper - Timings
+        //try (co.aikar.timings.Timing timed = world.timings.chunkSaveData.startTiming()) { // Paper - Timings
         this.playerChunkMap.save(flag);
-        } // Paper - Timings
+        //} // Paper - Timings
     }
 
     // Paper start - duplicate save, but call incremental
     public void saveIncrementally() {
         this.tickDistanceManager();
-        try (co.aikar.timings.Timing timed = world.timings.chunkSaveData.startTiming()) { // Paper - Timings
+        //try (co.aikar.timings.Timing timed = world.timings.chunkSaveData.startTiming()) { // Paper - Timings
             this.playerChunkMap.saveIncrementally();
-        } // Paper - Timings
+        //} // Paper - Timings
     }
     // Paper end
 
@@ -937,21 +937,21 @@ public class ChunkProviderServer extends IChunkProvider {
 
     public void tick(BooleanSupplier booleansupplier) {
         this.world.getMethodProfiler().enter("purge");
-        this.world.timings.doChunkMap.startTiming(); // Spigot
+        //this.world.timings.doChunkMap.startTiming(); // Spigot
         this.chunkMapDistance.purgeTickets();
         // Tuinity - replace logic
         this.tickDistanceManager();
-        this.world.timings.doChunkMap.stopTiming(); // Spigot
+        //this.world.timings.doChunkMap.stopTiming(); // Spigot
         this.world.getMethodProfiler().exitEnter("chunks");
-        this.world.timings.chunks.startTiming(); // Paper - timings
+        //this.world.timings.chunks.startTiming(); // Paper - timings
         this.playerChunkMap.playerChunkManager.tick(); // Tuinity - this is mostly is to account for view distance changes
         this.tickChunks();
-        this.world.timings.chunks.stopTiming(); // Paper - timings
-        this.world.timings.doChunkUnload.startTiming(); // Spigot
+        //this.world.timings.chunks.stopTiming(); // Paper - timings
+        //this.world.timings.doChunkUnload.startTiming(); // Spigot
         this.world.getMethodProfiler().exitEnter("unload");
         this.playerChunkMap.unloadChunks(booleansupplier);
         // Tuinity - replace logic
-        this.world.timings.doChunkUnload.stopTiming(); // Spigot
+        //this.world.timings.doChunkUnload.stopTiming(); // Spigot
         this.world.getMethodProfiler().exit();
         this.clearCache();
     }
@@ -1003,7 +1003,7 @@ public class ChunkProviderServer extends IChunkProvider {
             boolean flag2 = world.ticksPerAnimalSpawns != 0L && worlddata.getTime() % world.ticksPerAnimalSpawns == 0L; // CraftBukkit
 
             this.world.getMethodProfiler().enter("naturalSpawnCount");
-            this.world.timings.countNaturalMobs.startTiming(); // Paper - timings
+            //this.world.timings.countNaturalMobs.startTiming(); // Paper - timings
             int l = this.chunkMapDistance.b();
             // Paper start - per player mob spawning
             SpawnerCreature.d spawnercreature_d; // moved down
@@ -1021,7 +1021,7 @@ public class ChunkProviderServer extends IChunkProvider {
                 spawnercreature_d = SpawnerCreature.countMobs(l, this.world.A(), this::a, false, this); // Tuinity
             }
             // Paper end
-            this.world.timings.countNaturalMobs.stopTiming(); // Paper - timings
+            //this.world.timings.countNaturalMobs.stopTiming(); // Paper - timings
 
             int ticked = 0; // Tuinity - exec chunk tasks during world tick
 
@@ -1030,7 +1030,7 @@ public class ChunkProviderServer extends IChunkProvider {
             //List<PlayerChunk> list = Lists.newArrayList(this.playerChunkMap.f()); // Paper
             //Collections.shuffle(list); // Paper
             // Paper - moved up
-            this.world.timings.chunkTicks.startTiming(); // Paper
+            //this.world.timings.chunkTicks.startTiming(); // Paper
             // Tuinity start - optimise chunk tick iteration
             // Airplane start - use raw iterator
             //com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet.Iterator<Chunk> iterator = this.entityTickingChunks.iterator();
@@ -1042,9 +1042,9 @@ public class ChunkProviderServer extends IChunkProvider {
                 if (playerchunk != null) { // make sure load event has been called along with the load logic we put there
                     // Tuinity end - optimise chunk tick iteration
                     this.world.getMethodProfiler().enter("broadcast");
-                    this.world.timings.broadcastChunkUpdates.startTiming(); // Paper - timings
+                    //this.world.timings.broadcastChunkUpdates.startTiming(); // Paper - timings
                     playerchunk.a(chunk); // Tuinity
-                    this.world.timings.broadcastChunkUpdates.stopTiming(); // Paper - timings
+                    //this.world.timings.broadcastChunkUpdates.stopTiming(); // Paper - timings
                     this.world.getMethodProfiler().exit();
                     // Tuinity
 
@@ -1072,7 +1072,7 @@ public class ChunkProviderServer extends IChunkProvider {
             }
             // Airplane end
             // Tuinity end - optimise chunk tick iteration
-            this.world.timings.chunkTicks.stopTiming(); // Paper
+            //this.world.timings.chunkTicks.stopTiming(); // Paper
             this.world.getMethodProfiler().enter("customSpawners");
             if (flag1) {
                 try (co.aikar.timings.Timing ignored = this.world.timings.miscMobSpawning.startTiming()) { // Paper - timings
diff --git a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
index abdf21d38468f2ad96b3065dcb67a061c48c718c..d08e849a3214faf38a9f5a5f580c9ba2ea4c9565 100644
--- a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
@@ -1026,15 +1026,15 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     protected void unloadChunks(BooleanSupplier booleansupplier) {
         GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
 
-        try (Timing ignored = this.world.timings.poiUnload.startTiming()) { // Paper
+        //try (Timing ignored = this.world.timings.poiUnload.startTiming()) { // Paper
         gameprofilerfiller.enter("poi");
         this.m.a(booleansupplier);
-        } // Paper
+        //} // Paper
         gameprofilerfiller.exitEnter("chunk_unload");
         if (!this.world.isSavingDisabled()) {
-            try (Timing ignored = this.world.timings.chunkUnload.startTiming()) { // Paper
+            //try (Timing ignored = this.world.timings.chunkUnload.startTiming()) { // Paper
             this.b(booleansupplier);
-            }// Paper
+            //}// Paper
         }
 
         gameprofilerfiller.exit();
@@ -1082,9 +1082,9 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     private void asyncSave(IChunkAccess chunk) {
         ChunkCoordIntPair chunkPos = chunk.getPos();
         NBTTagCompound poiData;
-        try (Timing ignored = this.world.timings.chunkUnloadPOISerialization.startTiming()) {
+        //try (Timing ignored = this.world.timings.chunkUnloadPOISerialization.startTiming()) {
             poiData = this.getVillagePlace().getData(chunk.getPos());
-        }
+        //}
 
         com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.scheduleSave(this.world, chunkPos.x, chunkPos.z,
             poiData, null, com.destroystokyo.paper.io.PrioritizedTaskQueue.NORMAL_PRIORITY); // Tuinity - use normal priority
@@ -1097,7 +1097,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
         // Copied from PlayerChunkMap#saveChunk(IChunkAccess, boolean)
         if (chunkstatus.getType() != ChunkStatus.Type.LEVELCHUNK) {
-            try (co.aikar.timings.Timing ignored1 = this.world.timings.chunkSaveOverwriteCheck.startTiming()) { // Paper
+            //try (co.aikar.timings.Timing ignored1 = this.world.timings.chunkSaveOverwriteCheck.startTiming()) { // Paper
                 // Paper start - Optimize save by using status cache
                 try {
                     ChunkStatus statusOnDisk = this.getChunkStatusOnDisk(chunkPos);
@@ -1113,13 +1113,13 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     ex.printStackTrace();
                     return;
                 }
-            }
+            //}
         }
 
         ChunkRegionLoader.AsyncSaveData asyncSaveData;
-        try (Timing ignored = this.world.timings.chunkUnloadPrepareSave.startTiming()) {
+        //try (Timing ignored = this.world.timings.chunkUnloadPrepareSave.startTiming()) {
             asyncSaveData = ChunkRegionLoader.getAsyncSaveData(this.world, chunk);
-        }
+        //}
 
         this.world.asyncChunkTaskManager.scheduleChunkSave(chunkPos.x, chunkPos.z, com.destroystokyo.paper.io.PrioritizedTaskQueue.NORMAL_PRIORITY, // Tuinity - use normal priority
             asyncSaveData, chunk);
@@ -1259,7 +1259,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     private CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> f(ChunkCoordIntPair chunkcoordintpair) {
         // Paper start - Async chunk io
         final java.util.function.BiFunction<ChunkRegionLoader.InProgressChunkHolder, Throwable, Either<IChunkAccess, PlayerChunk.Failure>> syncLoadComplete = (chunkHolder, ioThrowable) -> {
-            try (Timing ignored = this.world.timings.chunkLoad.startTimingIfSync()) { // Paper
+            try /*(Timing ignored = this.world.timings.chunkLoad.startTimingIfSync())*/ { // Paper
                 this.world.getMethodProfiler().c("chunkLoad");
                 // Paper start
                 if (ioThrowable != null) {
@@ -1271,7 +1271,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 this.getVillagePlace().dequeueUnload(chunkcoordintpair.pair()); // Tuinity
                 // Paper end
 
-                if (chunkHolder.protoChunk != null) {try (Timing ignored2 = this.world.timings.chunkLoadLevelTimer.startTimingIfSync()) { // Paper start - timings // Paper - chunk is created async
+                if (chunkHolder.protoChunk != null) {//try (Timing ignored2 = this.world.timings.chunkLoadLevelTimer.startTimingIfSync()) { // Paper start - timings // Paper - chunk is created async
 
                     if (true) {
                         ProtoChunk protochunk = chunkHolder.protoChunk;
@@ -1282,7 +1282,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     }
 
                     PlayerChunkMap.LOGGER.error("Chunk file at {} is missing level data, skipping", chunkcoordintpair);
-                }} // Paper
+                }//} // Paper
             } catch (ReportedException reportedexception) {
                 Throwable throwable = reportedexception.getCause();
 
@@ -1415,7 +1415,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             ChunkStatus chunkstatus = PlayerChunk.getChunkStatus(playerchunk.getTicketLevel());
 
             return !chunkstatus.b(ChunkStatus.FULL) ? PlayerChunk.UNLOADED_CHUNK_ACCESS : either.mapLeft((ichunkaccess) -> {
-            try (Timing ignored = world.timings.chunkPostLoad.startTimingIfSync()) { // Paper
+            //try (Timing ignored = world.timings.chunkPostLoad.startTimingIfSync()) { // Paper
                 ChunkCoordIntPair chunkcoordintpair = playerchunk.i();
                 Chunk chunk;
 
@@ -1477,7 +1477,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 }
 
                 return chunk;
-                } // Paper
+                //} // Paper
             });
         }, (runnable) -> {
             Mailbox mailbox = this.mailboxMain;
@@ -1570,7 +1570,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     }
 
     public boolean saveChunk(IChunkAccess ichunkaccess) {
-        try (co.aikar.timings.Timing ignored = this.world.timings.chunkSave.startTiming()) { // Paper
+        //try (co.aikar.timings.Timing ignored = this.world.timings.chunkSave.startTiming()) { // Paper
         this.m.a(ichunkaccess.getPos());
         if (!ichunkaccess.isNeedsSaving()) {
             return false;
@@ -1583,7 +1583,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 ChunkStatus chunkstatus = ichunkaccess.getChunkStatus();
 
                 if (chunkstatus.getType() != ChunkStatus.Type.LEVELCHUNK) {
-                    try (co.aikar.timings.Timing ignored1 = this.world.timings.chunkSaveOverwriteCheck.startTiming()) { // Paper
+                    //try (co.aikar.timings.Timing ignored1 = this.world.timings.chunkSaveOverwriteCheck.startTiming()) { // Paper
                     if (this.h(chunkcoordintpair)) {
                         return false;
                     }
@@ -1591,14 +1591,14 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     if (chunkstatus == ChunkStatus.EMPTY && ichunkaccess.h().values().stream().noneMatch(StructureStart::e)) {
                         return false;
                     }
-                    } // Paper
+                    //} // Paper
                 }
 
                 this.world.getMethodProfiler().c("chunkSave");
                 NBTTagCompound nbttagcompound;
-                try (co.aikar.timings.Timing ignored1 = this.world.timings.chunkSaveDataSerialization.startTiming()) { // Paper
+                //try (co.aikar.timings.Timing ignored1 = this.world.timings.chunkSaveDataSerialization.startTiming()) { // Paper
                     nbttagcompound = ChunkRegionLoader.saveChunk(this.world, ichunkaccess);
-                } // Paper
+                //} // Paper
 
 
                 // Paper start - async chunk io
@@ -1613,7 +1613,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 return false;
             }
         }
-        } // Paper
+        //} // Paper
     }
 
     private boolean h(ChunkCoordIntPair chunkcoordintpair) {
@@ -2176,24 +2176,24 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     // Paper start - optimised tracker
     private final void processTrackQueue() {
-        this.world.timings.tracker1.startTiming();
+        //this.world.timings.tracker1.startTiming();
         try {
             for (EntityTracker tracker : this.trackedEntities.values()) {
                 // update tracker entry
                 tracker.updatePlayers(tracker.tracker.getPlayersInTrackRange());
             }
         } finally {
-            this.world.timings.tracker1.stopTiming();
+            //this.world.timings.tracker1.stopTiming();
         }
 
 
-        this.world.timings.tracker2.startTiming();
+        //this.world.timings.tracker2.startTiming();
         try {
             for (EntityTracker tracker : this.trackedEntities.values()) {
                 tracker.trackerEntry.tick();
             }
         } finally {
-            this.world.timings.tracker2.stopTiming();
+            //this.world.timings.tracker2.stopTiming();
         }
     }
     // Paper end - optimised tracker
@@ -2210,7 +2210,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
         PlayerChunkMap.EntityTracker playerchunkmap_entitytracker;
         ObjectIterator objectiterator;
-        world.timings.tracker1.startTiming(); // Paper
+        //world.timings.tracker1.startTiming(); // Paper
 
         for (objectiterator = this.trackedEntities.values().iterator(); objectiterator.hasNext(); playerchunkmap_entitytracker.trackerEntry.a()) {
             playerchunkmap_entitytracker = (PlayerChunkMap.EntityTracker) objectiterator.next();
@@ -2228,17 +2228,17 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 playerchunkmap_entitytracker.e = sectionposition1;
             }
         }
-        world.timings.tracker1.stopTiming(); // Paper
+        //world.timings.tracker1.stopTiming(); // Paper
 
         if (!list.isEmpty()) {
             objectiterator = this.trackedEntities.values().iterator();
 
-            world.timings.tracker2.startTiming(); // Paper
+            //world.timings.tracker2.startTiming(); // Paper
             while (objectiterator.hasNext()) {
                 playerchunkmap_entitytracker = (PlayerChunkMap.EntityTracker) objectiterator.next();
                 playerchunkmap_entitytracker.track(list);
             }
-            world.timings.tracker2.stopTiming(); // Paper
+            //world.timings.tracker2.stopTiming(); // Paper
         }
 
 
diff --git a/src/main/java/net/minecraft/server/level/WorldServer.java b/src/main/java/net/minecraft/server/level/WorldServer.java
index 68b8db53678d1390342e50cda2bb559766fa92b3..ac54d10a81388e11ebbfaf70aaf894ad54a3137b 100644
--- a/src/main/java/net/minecraft/server/level/WorldServer.java
+++ b/src/main/java/net/minecraft/server/level/WorldServer.java
@@ -1044,26 +1044,26 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         this.Q();
         this.b();
         gameprofilerfiller.exitEnter("chunkSource");
-        this.timings.chunkProviderTick.startTiming(); // Paper - timings
+        //this.timings.chunkProviderTick.startTiming(); // Paper - timings
         this.getChunkProvider().tick(booleansupplier);
-        this.timings.chunkProviderTick.stopTiming(); // Paper - timings
+        //this.timings.chunkProviderTick.stopTiming(); // Paper - timings
         gameprofilerfiller.exitEnter("tickPending");
-        timings.scheduledBlocks.startTiming(); // Paper
+        //timings.scheduledBlocks.startTiming(); // Paper
         if (!this.isDebugWorld()) {
             this.nextTickListBlock.b();
             this.nextTickListFluid.b();
         }
-        timings.scheduledBlocks.stopTiming(); // Paper
+        //timings.scheduledBlocks.stopTiming(); // Paper
 
         // Tuinity - replace logic
         gameprofilerfiller.exitEnter("raid");
-        this.timings.raids.startTiming(); // Paper - timings
+        //this.timings.raids.startTiming(); // Paper - timings
         this.persistentRaid.a();
-        this.timings.raids.stopTiming(); // Paper - timings
+        //this.timings.raids.stopTiming(); // Paper - timings
         gameprofilerfiller.exitEnter("blockEvents");
-        timings.doSounds.startTiming(); // Spigot
+        //timings.doSounds.startTiming(); // Spigot
         this.ak();
-        timings.doSounds.stopTiming(); // Spigot
+        //timings.doSounds.stopTiming(); // Spigot
         // Tuinity - replace logic
         this.ticking = false;
         gameprofilerfiller.exitEnter("entities");
@@ -1074,7 +1074,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         }
 
         if (flag3 || this.emptyTime++ < 300) {
-            timings.tickEntities.startTiming(); // Spigot
+            //timings.tickEntities.startTiming(); // Spigot
             if (this.dragonBattle != null) {
                 this.dragonBattle.b();
             }
@@ -1083,7 +1083,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet.Iterator<Entity> objectiterator = this.entitiesForIteration.iterator(); // Tuinity
 
             org.spigotmc.ActivationRange.activateEntities(this); // Spigot
-            timings.entityTick.startTiming(); // Spigot
+            //timings.entityTick.startTiming(); // Spigot
             while (objectiterator.hasNext()) {
                 Entity entity = (Entity) objectiterator.next(); // Tuinity
                 Entity entity1 = entity.getVehicle();
@@ -1164,7 +1164,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
 
                 gameprofilerfiller.exit();
             }
-            timings.entityTick.stopTiming(); // Spigot
+            //timings.entityTick.stopTiming(); // Spigot
 
             objectiterator.finishedIterating(); // Tuinity
             this.tickingEntities = false;
@@ -1187,7 +1187,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 this.registerEntity(entity2);
             }
 
-            timings.tickEntities.stopTiming(); // Spigot
+            //timings.tickEntities.stopTiming(); // Spigot
             // Tuinity - replace logic
             this.tickBlockEntities();
         }
@@ -1312,7 +1312,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         gameprofilerfiller.exit();
         if (i > 0) {
             gameprofilerfiller.enter("randomTick");
-            timings.chunkTicksBlocks.startTiming(); // Paper
+            //timings.chunkTicksBlocks.startTiming(); // Paper
 
             ChunkSection[] sections = chunk.getSections();
 
@@ -1347,7 +1347,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 }
             }
             gameprofilerfiller.exit();
-            timings.chunkTicksBlocks.stopTiming(); // Paper
+            //timings.chunkTicksBlocks.stopTiming(); // Paper
             // Paper end
         }
     }
@@ -1478,8 +1478,8 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             // Spigot end
             // Paper start- timings
             final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
-            timer = isActive ? entity.getEntityType().tickTimer.startTiming() : entity.getEntityType().inactiveTickTimer.startTiming(); // Paper
-            try {
+            //timer = isActive ? entity.getEntityType().tickTimer.startTiming() : entity.getEntityType().inactiveTickTimer.startTiming(); // Paper
+            //try {
             // Paper end - timings
             entity.g(entity.locX(), entity.locY(), entity.locZ());
             entity.lastYaw = entity.yaw;
@@ -1506,7 +1506,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             }
 
             this.chunkCheck(entity);
-            } finally { timer.stopTiming(); } // Paper - timings
+            //} finally { timer.stopTiming(); } // Paper - timings
             if (entity.inChunk) {
                 Iterator iterator = entity.getPassengers().iterator();
 
@@ -1533,8 +1533,8 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             if (entity1 instanceof EntityHuman || this.getChunkProvider().a(entity1)) {
                 // Paper - EAR 2
                 final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity1);
-                co.aikar.timings.Timing timer = isActive ? entity1.getEntityType().passengerTickTimer.startTiming() : entity1.getEntityType().passengerInactiveTickTimer.startTiming(); // Paper
-                try {
+                //co.aikar.timings.Timing timer = isActive ? entity1.getEntityType().passengerTickTimer.startTiming() : entity1.getEntityType().passengerInactiveTickTimer.startTiming(); // Paper
+                //try {
                 // Paper end
                 entity1.g(entity1.locX(), entity1.locY(), entity1.locZ());
                 entity1.lastYaw = entity1.yaw;
@@ -1570,7 +1570,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
 
                         this.a(entity1, entity2);
                     }
-                } } finally { timer.stopTiming(); } // Paper - EAR2 timings
+                } //} finally { timer.stopTiming(); } // Paper - EAR2 timings
 
             }
         } else {
@@ -1670,7 +1670,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld()));
         }
 
-        try (co.aikar.timings.Timing ignored = timings.worldSave.startTiming()) {
+        //try (co.aikar.timings.Timing ignored = timings.worldSave.startTiming()) {
             if (doFull) {
                 this.saveData();
             }
@@ -1690,7 +1690,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 convertable.a(this.server.customRegistry, this.worldDataServer, this.server.getPlayerList().save());
             }
             // CraftBukkit end
-        }
+        //}
     }
     // Paper end
 
@@ -1699,7 +1699,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
 
         if (!flag1) {
             org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit
-            try (co.aikar.timings.Timing ignored = timings.worldSave.startTiming()) { // Paper
+            //try (co.aikar.timings.Timing ignored = timings.worldSave.startTiming()) { // Paper
             if (iprogressupdate != null) {
                 iprogressupdate.a(new ChatMessage("menu.savingLevel"));
             }
@@ -1712,7 +1712,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             timings.worldSaveChunks.startTiming(); // Paper
             chunkproviderserver.save(flag);
             timings.worldSaveChunks.stopTiming(); // Paper
-            } // Paper
+            //} // Paper
         }
 
         // CraftBukkit start - moved from MinecraftServer.saveChunks
diff --git a/src/main/java/net/minecraft/server/network/PlayerConnection.java b/src/main/java/net/minecraft/server/network/PlayerConnection.java
index a6c4ac6fb2ebd16d3ec6b4944f5cf65ad4195497..4142e6205d15447381b68a778551a86ea07257ea 100644
--- a/src/main/java/net/minecraft/server/network/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/network/PlayerConnection.java
@@ -2249,7 +2249,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
     // CraftBukkit end
 
     private void handleCommand(String s) {
-        MinecraftTimings.playerCommandTimer.startTiming(); // Paper
+        //MinecraftTimings.playerCommandTimer.startTiming(); // Paper
         // CraftBukkit start - whole method
         if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
         this.LOGGER.info(this.player.getName() + " issued server command: " + s);
@@ -2260,7 +2260,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
         this.server.getPluginManager().callEvent(event);
 
         if (event.isCancelled()) {
-            MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
+            //MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
             return;
         }
 
@@ -2273,7 +2273,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
             java.util.logging.Logger.getLogger(PlayerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
             return;
         } finally {
-            MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
+            //MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
         }
         // this.minecraftServer.getCommandDispatcher().a(this.player.getCommandListener(), s);
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 1a4e6f5ce8fd87179916729e7ad64ee3e37d2fda..82da38eea4dccc24c95017153497a503a98ff35d 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1265,7 +1265,7 @@ public abstract class PlayerList {
     }
     public void savePlayers(Integer interval) {
         MCUtil.ensureMain("Save Players" , () -> { // Paper - Ensure main
-        MinecraftTimings.savePlayers.startTiming(); // Paper
+        //MinecraftTimings.savePlayers.startTiming(); // Paper
         int numSaved = 0;
         long now = MinecraftServer.currentTick;
         for (int i = 0; i < this.players.size(); ++i) {
@@ -1276,7 +1276,7 @@ public abstract class PlayerList {
             }
             // Paper end
         }
-        MinecraftTimings.savePlayers.stopTiming(); // Paper
+        //MinecraftTimings.savePlayers.stopTiming(); // Paper
         return null; }); // Paper - ensure main
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/EntityTypes.java b/src/main/java/net/minecraft/world/entity/EntityTypes.java
index 7f70dda656ff9d802200f18139d2695e58c551c7..d43a85ee627bdf05cac7e67a0ce2d850ecf03868 100644
--- a/src/main/java/net/minecraft/world/entity/EntityTypes.java
+++ b/src/main/java/net/minecraft/world/entity/EntityTypes.java
@@ -299,6 +299,7 @@ public class EntityTypes<T extends Entity> {
         this.bm = i;
         this.bn = j;
 
+        /*
         // Paper start - timings
         this.id = id;
         this.tickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "tick");
@@ -306,6 +307,7 @@ public class EntityTypes<T extends Entity> {
         this.passengerTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerTick");
         this.passengerInactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerInactiveTick");
         // Paper end
+        */
     }
 
     @Nullable
@@ -549,12 +551,14 @@ public class EntityTypes<T extends Entity> {
         return this.bn;
     }
 
+    /*
     // Paper start - timings
     public final co.aikar.timings.Timing tickTimer;
     public final co.aikar.timings.Timing inactiveTickTimer;
     public final co.aikar.timings.Timing passengerTickTimer;
     public final co.aikar.timings.Timing passengerInactiveTickTimer;
     // Paper end
+    */
     public boolean isDeltaTracking() {
         return this != EntityTypes.PLAYER && this != EntityTypes.LLAMA_SPIT && this != EntityTypes.WITHER && this != EntityTypes.BAT && this != EntityTypes.ITEM_FRAME && this != EntityTypes.LEASH_KNOT && this != EntityTypes.PAINTING && this != EntityTypes.END_CRYSTAL && this != EntityTypes.EVOKER_FANGS;
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/VillagePlace.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/VillagePlace.java
index 13d94ecd703b3cd0412e138532d2dd74e5bf250d..6d097dea27c0cfe6f96951d0402c159b7d58c272 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/VillagePlace.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/VillagePlace.java
@@ -325,9 +325,9 @@ public class VillagePlace extends RegionFileSection<VillagePlaceSection> {
                 ChunkCoordIntPair chunkcoordintpair = SectionPosition.a(((RegionFileSection)this).d.firstLong()).r();
 
                 NBTTagCompound data;
-                try (co.aikar.timings.Timing ignored1 = this.world.timings.poiSaveDataSerialization.startTiming()) {
+                //try (co.aikar.timings.Timing ignored1 = this.world.timings.poiSaveDataSerialization.startTiming()) {
                     data = this.getData(chunkcoordintpair);
-                }
+                //}
                 com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.scheduleSave(this.world,
                     chunkcoordintpair.x, chunkcoordintpair.z, data, null, com.destroystokyo.paper.io.PrioritizedTaskQueue.NORMAL_PRIORITY); // Tuinity - use normal priority
             }
diff --git a/src/main/java/net/minecraft/world/level/SpawnerCreature.java b/src/main/java/net/minecraft/world/level/SpawnerCreature.java
index ab6812698757c05c2e923006d4e3370a7d6c4e03..494c5d2f77eb4d3962b304db0a5379e13bfcb72c 100644
--- a/src/main/java/net/minecraft/world/level/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/world/level/SpawnerCreature.java
@@ -132,7 +132,7 @@ public final class SpawnerCreature {
 
     public static void a(WorldServer worldserver, Chunk chunk, SpawnerCreature.d spawnercreature_d, boolean flag, boolean flag1, boolean flag2) {
         worldserver.getMethodProfiler().enter("spawner");
-        worldserver.timings.mobSpawn.startTiming(); // Spigot
+        //worldserver.timings.mobSpawn.startTiming(); // Spigot
         EnumCreatureType[] aenumcreaturetype = SpawnerCreature.c;
         int i = aenumcreaturetype.length;
 
@@ -205,7 +205,7 @@ public final class SpawnerCreature {
             }
         }
 
-        worldserver.timings.mobSpawn.stopTiming(); // Spigot
+        //worldserver.timings.mobSpawn.stopTiming(); // Spigot
         worldserver.getMethodProfiler().exit();
     }
 
diff --git a/src/main/java/net/minecraft/world/level/TickListServer.java b/src/main/java/net/minecraft/world/level/TickListServer.java
index 4fd89bbe6ce578fd3a166bcfbbe41908a7bb4753..aef3bb816f89568c46aca18f588e174fd33b0006 100644
--- a/src/main/java/net/minecraft/world/level/TickListServer.java
+++ b/src/main/java/net/minecraft/world/level/TickListServer.java
@@ -43,11 +43,11 @@ public class TickListServer<T> implements TickList<T> {
         this.b = function;
         this.e = worldserver;
         this.h = consumer;
-        this.timingCleanup = co.aikar.timings.WorldTimingsHandler.getTickList(worldserver, timingsType + " - Cleanup");
-        this.timingTicking = co.aikar.timings.WorldTimingsHandler.getTickList(worldserver, timingsType + " - Ticking");
+        //this.timingCleanup = co.aikar.timings.WorldTimingsHandler.getTickList(worldserver, timingsType + " - Cleanup");
+        //this.timingTicking = co.aikar.timings.WorldTimingsHandler.getTickList(worldserver, timingsType + " - Ticking");
     }
-    private final co.aikar.timings.Timing timingCleanup; // Paper
-    private final co.aikar.timings.Timing timingTicking; // Paper
+    //private final co.aikar.timings.Timing timingCleanup; // Paper
+    //private final co.aikar.timings.Timing timingTicking; // Paper
     // Paper end
 
     // Paper start
@@ -80,7 +80,7 @@ public class TickListServer<T> implements TickList<T> {
 
             this.e.getMethodProfiler().enter("cleaning");
 
-            this.timingCleanup.startTiming(); // Paper
+            //this.timingCleanup.startTiming(); // Paper
             NextTickListEntry nextticklistentry;
 
             while (i > 0 && iterator.hasNext()) {
@@ -96,9 +96,9 @@ public class TickListServer<T> implements TickList<T> {
                     --i;
                 }
             }
-            this.timingCleanup.stopTiming(); // Paper
+            //this.timingCleanup.stopTiming(); // Paper
 
-            this.timingTicking.startTiming(); // Paper
+            //this.timingTicking.startTiming(); // Paper
             this.e.getMethodProfiler().exitEnter("ticking");
 
             while ((nextticklistentry = (NextTickListEntry) this.f.poll()) != null) {
@@ -118,7 +118,7 @@ public class TickListServer<T> implements TickList<T> {
                 }
             }
 
-            this.timingTicking.stopTiming(); // Paper
+            //this.timingTicking.stopTiming(); // Paper
             this.e.getMethodProfiler().exit();
             this.g.clear();
             this.f.clear();
diff --git a/src/main/java/net/minecraft/world/level/World.java b/src/main/java/net/minecraft/world/level/World.java
index fcb15a681bf3b96acc5ee3f6c45f8c5714e00878..7826ea3a924b6d99e1ef96eb2f722ae29286c04d 100644
--- a/src/main/java/net/minecraft/world/level/World.java
+++ b/src/main/java/net/minecraft/world/level/World.java
@@ -994,7 +994,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
 
         gameprofilerfiller.enter("blockEntities");
-        timings.tileEntityTick.startTiming(); // Spigot
+        //timings.tileEntityTick.startTiming(); // Spigot
         if (!this.tileEntityListUnload.isEmpty()) {
             // Airplane start - we just use the identitymap as the basis for the unload set now instead of copying
             /*
@@ -1034,7 +1034,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
                         gameprofilerfiller.a(() -> {
                             return String.valueOf(TileEntityTypes.a(tileentity.getTileType()));
                         });
-                        tileentity.tickTimer.startTiming(); // Spigot
+                        //tileentity.tickTimer.startTiming(); // Spigot
                         if (tileentity.getTileType().isValidBlock(chunk.getType(blockposition).getBlock())) { // Paper - reuse the chunk from above, do not look it up again
                             ((ITickable) tileentity).tick();
                         } else {
@@ -1056,7 +1056,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
                         // Paper end
                         // Spigot start
                     } finally {
-                        tileentity.tickTimer.stopTiming();
+                        //tileentity.tickTimer.stopTiming();
                         // Spigot end
                     }
                 }
@@ -1076,8 +1076,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
             }
         }
 
-        timings.tileEntityTick.stopTiming(); // Spigot
-        timings.tileEntityPending.startTiming(); // Spigot
+        //timings.tileEntityTick.stopTiming(); // Spigot
+        //timings.tileEntityPending.startTiming(); // Spigot
         this.tickingTileEntities = false;
         gameprofilerfiller.exitEnter("pendingBlockEntities");
         if (!this.tileEntityListPending.isEmpty()) {
@@ -1110,7 +1110,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
             this.tileEntityListPending.clear();
         }
 
-        timings.tileEntityPending.stopTiming(); // Spigot
+        //timings.tileEntityPending.stopTiming(); // Spigot
         co.aikar.timings.TimingHistory.tileEntityTicks += this.tileEntityListTick.size(); // Paper
         gameprofilerfiller.exit();
         spigotConfig.currentPrimedTnt = 0; // Spigot
diff --git a/src/main/java/net/minecraft/world/level/block/entity/TileEntity.java b/src/main/java/net/minecraft/world/level/block/entity/TileEntity.java
index 93d02ccb87c17404c55884f52ae40c7b7ddfb103..57e45bac73402c7c1ab0510a17a500b48225bab1 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/TileEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/TileEntity.java
@@ -29,7 +29,7 @@ import co.aikar.timings.Timing; // Paper
 
 public abstract class TileEntity implements net.minecraft.server.KeyedObject { // Paper
 
-    public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
+    //public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
     // CraftBukkit start - data containers
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
     public CraftPersistentDataContainer persistentDataContainer;
diff --git a/src/main/java/net/minecraft/world/level/chunk/Chunk.java b/src/main/java/net/minecraft/world/level/chunk/Chunk.java
index 8f5809756b4fb358f1207c1d61c5cbe6df3fff00..f4a0ec6e855356f83dffadf926e4279942f0d6e9 100644
--- a/src/main/java/net/minecraft/world/level/chunk/Chunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/Chunk.java
@@ -1037,7 +1037,7 @@ public class Chunk implements IChunkAccess {
             server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(this.bukkitChunk, this.needsDecoration));
 
             if (this.needsDecoration) {
-                try (co.aikar.timings.Timing ignored = this.world.timings.chunkLoadPopulate.startTiming()) { // Paper
+                //try (co.aikar.timings.Timing ignored = this.world.timings.chunkLoadPopulate.startTiming()) { // Paper
                 this.needsDecoration = false;
                 java.util.Random random = new java.util.Random();
                 random.setSeed(world.getSeed());
@@ -1057,7 +1057,7 @@ public class Chunk implements IChunkAccess {
                     }
                 }
                 server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
-                } // Paper
+                //} // Paper
             }
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 3bfb0e2f18d86776d79576e657e0fecefb562ae8..01c182d4646f68b4fcb8a9ed9ce11f90aba809b3 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -518,10 +518,10 @@ public class CraftScheduler implements BukkitScheduler {
                 runners.remove(task.getTaskId());
             }
         }
-        MinecraftTimings.bukkitSchedulerFinishTimer.startTiming();
+        //MinecraftTimings.bukkitSchedulerFinishTimer.startTiming();
         pending.addAll(temp);
         temp.clear();
-        MinecraftTimings.bukkitSchedulerFinishTimer.stopTiming();
+        //MinecraftTimings.bukkitSchedulerFinishTimer.stopTiming();
         //debugHead = debugHead.getNextHead(currentTick); // Paper
     }
 
@@ -567,7 +567,7 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     void parsePending() { // Paper
-        if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.startTiming(); // Paper
+        //if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.startTiming(); // Paper
         CraftTask head = this.head;
         CraftTask task = head.getNext();
         CraftTask lastTask = head;
@@ -586,7 +586,7 @@ public class CraftScheduler implements BukkitScheduler {
             task.setNext(null);
         }
         this.head = lastTask;
-        if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.stopTiming(); // Paper
+        //if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.stopTiming(); // Paper
     }
 
     private boolean isReady(final int currentTick) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 8b4c34282f14f17d4efbddfdc63c49110ba068fe..75e38a3080ae3e45484cdc24f710d97703ef2cb8 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -96,13 +96,13 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
 
     @Override
     public void run() {
-        try (Timing ignored = timings.startTiming()) { // Paper
+        //try (Timing ignored = timings.startTiming()) { // Paper
         if (rTask != null) {
             rTask.run();
         } else {
             cTask.accept(this);
         }
-        } // Paper
+        //} // Paper
     }
 
     // Paper start - Backport Spigot-#891
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index b9c675ecae8fd87cca3c7475f4901c9d5529ac6b..e7ca5c4e31b0dffc207b87bb9dbf4adefa1fb3df 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -177,7 +177,7 @@ public class ActivationRange
      */
     public static void activateEntities(World world)
     {
-        MinecraftTimings.entityActivationCheckTimer.startTiming();
+        //MinecraftTimings.entityActivationCheckTimer.startTiming();
         final int miscActivationRange = world.spigotConfig.miscActivationRange;
         final int raiderActivationRange = world.spigotConfig.raiderActivationRange;
         final int animalActivationRange = world.spigotConfig.animalActivationRange;
@@ -235,7 +235,7 @@ public class ActivationRange
                 }
             }
         }
-        MinecraftTimings.entityActivationCheckTimer.stopTiming();
+        //MinecraftTimings.entityActivationCheckTimer.stopTiming();
     }
 
     /**
