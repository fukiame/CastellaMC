From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KurumiFake <kurumiisshidowife@gmail.com>
Date: Thu, 30 Jun 2022 00:46:56 +0700
Subject: [PATCH] move Airplane config to yaml

theres nothing bad with AIR nessecarily saying, its just kinda annoying having multiple file formats to deal with

diff --git a/pom.xml b/pom.xml
index 2bc8b83f41bfdaa7ffd2e66c7ad3476e26002da5..41642af65b719ea829f0f32b8e4c2da7f5bb4aef 100644
--- a/pom.xml
+++ b/pom.xml
@@ -235,13 +235,6 @@
                 </exclusion>
             </exclusions>
         </dependency>
-        <!-- Airplane Config -->
-        <dependency>
-            <groupId>com.github.technove</groupId>
-            <artifactId>AIR</artifactId>
-            <version>fe3dbb4420</version>
-            <scope>compile</scope>
-        </dependency>
     </dependencies>
 
     <!-- This builds a completely 'ready to start' jar with all dependencies inside -->
diff --git a/src/main/java/gg/airplane/AirplaneCommand.java b/src/main/java/gg/airplane/AirplaneCommand.java
index 1b6bcb083ad2439bbfc4310a43bfd165ab350cb6..5098272bc37ec929c60487659966f671013242a7 100644
--- a/src/main/java/gg/airplane/AirplaneCommand.java
+++ b/src/main/java/gg/airplane/AirplaneCommand.java
@@ -46,6 +46,8 @@ public class AirplaneCommand extends Command {
 
         if (args[0].equalsIgnoreCase("reload")) {
             MinecraftServer console = MinecraftServer.getServer();
+            // Lazinity start - migrate to yaml
+            /*
             try {
                 AirplaneConfig.load();
             } catch (IOException e) {
@@ -53,6 +55,9 @@ public class AirplaneCommand extends Command {
                 e.printStackTrace();
                 return true;
             }
+            */
+            AirplaneConfig.init((java.io.File) console.options.valueOf("airplane-settings"));
+            // Lazinity end
             console.server.reloadCount++;
 
             Command.broadcastCommandMessage(sender, prefix + "Airplane configuration has been reloaded.");
diff --git a/src/main/java/gg/airplane/AirplaneConfig.java b/src/main/java/gg/airplane/AirplaneConfig.java
index 3a8a494d2f4f5a2d1f35328be082e2c4379e1474..bc3686ec7a612118463f3c814ba027036a6f2286 100644
--- a/src/main/java/gg/airplane/AirplaneConfig.java
+++ b/src/main/java/gg/airplane/AirplaneConfig.java
@@ -1,52 +1,79 @@
 package gg.airplane;
 
-import co.technove.air.AIR;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.file.YamlConfiguration;
+
 import net.minecraft.server.MinecraftServer;
-import org.apache.logging.log4j.Level;
 
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.util.logging.Level;
+
+public final class AirplaneConfig {
+
+    private static final Object[] EMPTY = new Object[0];
 
-public class AirplaneConfig {
+    private static File configFile;
+    private static YamlConfiguration config;
 
-    private static AIR config;
+    public static void init(final File file) {
+        AirplaneConfig.configFile = file;
+        AirplaneConfig.config = new YamlConfiguration();
+        config.options().copyDefaults(true);
 
-    public static void load() throws IOException {
-        File configFile = new File("airplane.air");
-        if (configFile.exists()) {
-            try (FileInputStream inputStream = new FileInputStream(configFile)) {
-                config = new AIR(inputStream);
+        if (!file.exists()) {
+            try {
+                file.createNewFile();
+            } catch (final Exception ex) {
+                System.out.println("Failure to create Airplane config");
+                ex.printStackTrace();
             }
         } else {
-            config = new AIR();
+            try {
+                config.load(file);
+            } catch (final Exception ex) {
+                System.out.println("Failure to load Airplane config");
+                throw new RuntimeException(ex);
+            }
         }
 
-        config.setComment("info",
-          "Airplane Configuration",
-          "Read https://blog.airplane.gg/ to find out more about Airplane",
-          "Join our Discord to receive support & optimization help: https://discord.gg/3gtc45q");
-        config.getString("info.version", "1.0");
+        AirplaneConfig.load(AirplaneConfig.class, null);
+    }
 
-        for (Method method : AirplaneConfig.class.getDeclaredMethods()) {
-            if (Modifier.isStatic(method.getModifiers()) && Modifier.isPrivate(method.getModifiers())) {
+    public static void load(Class<?> clazz, Object instance) {
+        for (final Method method : clazz.getDeclaredMethods()) {
+            if (method.getReturnType() != void.class || method.getParameterCount() != 0 ||
+                    !Modifier.isPrivate(method.getModifiers()) || (instance == null && !Modifier.isStatic(method.getModifiers()))) {
+                continue;
+            }
+
+            try {
                 method.setAccessible(true);
-                try {
-                    method.invoke(null);
-                } catch (Throwable t) {
-                    MinecraftServer.LOGGER.log(Level.WARN, "Failed to load configuration option from " + method.getName(), t);
-                }
+                method.invoke(instance, EMPTY);
+            } catch (final Exception ex) {
+                throw new RuntimeException(ex);
             }
         }
 
-        try (FileOutputStream outputStream = new FileOutputStream(configFile)) {
-            config.save(outputStream);
+        try {
+            config.save(AirplaneConfig.configFile);
+        } catch (final Exception ex) {
+            System.out.println("Unable to save Airplane config");
+            ex.printStackTrace();
         }
     }
 
+    private static boolean getBoolean(final String path, final boolean dfl) {
+        AirplaneConfig.config.addDefault(path, Boolean.valueOf(dfl));
+        return AirplaneConfig.config.getBoolean(path, dfl);
+    }
+
+    private static int getInt(final String path, final int dfl) {
+        AirplaneConfig.config.addDefault(path, Integer.valueOf(dfl));
+        return AirplaneConfig.config.getInt(path, dfl);
+    }
+
     public static boolean dearEnabled;
     public static int startDistance;
     public static int startDistanceSquared;
@@ -55,53 +82,26 @@ public class AirplaneConfig {
     public static boolean dynamicVillagerBehavior;
     public static boolean dynamicPiglinBehavior;
     public static boolean dynamicHoglinBehavior;
-
     private static void dynamicActivationRange() {
-        config.setComment("activation-range", "Optimizes how entities act when", "they're far away from the player");
-
-        dearEnabled = config.getBoolean("activation-range.enabled", true);
-        startDistance = config.getInt("activation-range.start-distance", 12,
-          "This value determines how far away an entity has to be",
-          "from the player to start being effected by DEAR.");
+        dearEnabled = getBoolean("activation-range.enabled", true);
+        startDistance = getInt("activation-range.start-distance", 12);
         startDistanceSquared = startDistance * startDistance;
-        maximumActivationPrio = config.getInt("activation-range.max-tick-freq", 20,
-          "This value defines how often in ticks, the furthest entity",
-          "will get their pathfinders and behaviors ticked. 20 = 1s");
-        activationDistanceMod = config.getInt("activation-range.activation-dist-mod", 8,
-          "This value defines how much distance modifies an entity's",
-          "tick frequency. freq = (distanceToPlayer^2) / (2^value)",
-          "If you want further away entities to tick less often, use 7.",
-          "If you want further away entities to tick more often, try 9.");
-
-        config.setComment("behavior-activation", "A list of entities to use the dynamic activation range", "to modify how often their behaviors are ticked");
-
-        dynamicVillagerBehavior = config.getBoolean("behavior-activation.villager", true);
-        dynamicPiglinBehavior = config.getBoolean("behavior-activation.piglin", true);
-        dynamicHoglinBehavior = config.getBoolean("behavior-activation.hoglin", true);
+        maximumActivationPrio = getInt("activation-range.max-tick-freq", 20);
+        activationDistanceMod = getInt("activation-range.activation-dist-mod", 8);
+        dynamicVillagerBehavior = getBoolean("behavior-activation.villager", true);
+        dynamicPiglinBehavior = getBoolean("behavior-activation.piglin", true);
+        dynamicHoglinBehavior = getBoolean("behavior-activation.hoglin", true);
     }
 
-
     public static byte entityDespawnCheckFrequency;
-
     private static void entitySettings() {
-        config.setComment("entities", "Configures settings for generic entities");
-
-        entityDespawnCheckFrequency = (byte) Math.max(config.getInt("entities.despawn-check-freq", 8), Byte.MAX_VALUE);
+        entityDespawnCheckFrequency = (byte) Math.max(getInt("entities.despawn-check-freq", 8), Byte.MAX_VALUE);
     }
 
-
     public static boolean disableMethodProfiler;
     public static boolean simplerItemCollision;
-
     private static void miscSettings() {
-        config.setComment("misc", "Settings for things that don't belong elsewhere");
-
-        disableMethodProfiler = config.getBoolean("misc.disable-method-profiler", true);
-        simplerItemCollision = config.getBoolean("misc.simpler-item-collision", false,
-          "When an item is inside a block, it gets pushed up.",
-          "This option when true makes the check simpler,",
-          "ignoring entities and complex collisions like pistons.");
+        disableMethodProfiler = getBoolean("misc.disable-method-profiler", true);
+        simplerItemCollision = getBoolean("misc.simpler-item-collision", false);
     }
-
-
 }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 5836c44bbd019a7eeaad875eddad9b953f4d6c92..6c93f2d6ab6755898f7fe828bbc863dd1efa7194 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -216,7 +216,8 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
         com.tuinity.tuinity.config.TuinityConfig.init((java.io.File) options.valueOf("tuinity-settings")); // Tuinity - Server Config
-        gg.airplane.AirplaneConfig.load(); // Airplane - config
+        //gg.airplane.AirplaneConfig.load(); // Airplane - config // Lazinity
+        gg.airplane.AirplaneConfig.init((java.io.File) options.valueOf("airplane-settings")); // Airplane - config // Lazinity - migrate to yaml
         gg.airplane.commands.AirplaneCommands.init(); // Airplane - command
 
         this.setPVP(dedicatedserverproperties.pvp);
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 53cc9a1a1b2a0316f8c6d7b93c3cf428a7c5d114..928586046c0fa2f508b12e885f109ddecb3c035f 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -160,6 +160,12 @@ public class Main {
                         .ofType(File.class)
                         .defaultsTo(new File("lazinity.yml"))
                         .describedAs("Yml file");
+
+                acceptsAll(asList("airplane", "airplane-settings"), "File for airplane settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("airplane.yml"))
+                        .describedAs("Yml file");
                 // Lazinity end
 
                 // Paper start
